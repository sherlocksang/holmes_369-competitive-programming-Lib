#include <bits/stdc++.h>

#define ll long long
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define PI pair<int,int>

#define REP(i, n) for(int i=0;i<(int)(n);++i)
#define FOR(i,l,h) for(int i=(int)(l);i<=(int)(h);++i)
#define FORD(i,h,l) for(int i=(int)(h);i>=(int)(l);--i)

//#define max(a,b) a>b?a:b
//#define min(a,b) a>b?b:a

ll gcd(ll a, ll b) { return !b ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }

#define dump(x)  cerr << #x << " = " << (x) << endl
#define ALL(t) (t).begin(),(t).end()
#define ALLR(t) (t).rbegin(),(t).rend()



using namespace std;

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

int sum() { return 0; }

template<typename T, typename... Args>
T sum(T a, Args... args) { return a + sum(args...); }

const int dx4[4] = {0, 0, 1, -1};
const int dy4[4] = {-1, 1, 0, 0};
const int dx8[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
const int dy8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

#define MOD 1000000007
///////////////////////////////////////


//-----------------------------------------------
//////////////////////////////////////////
//---------DAY-9 , 21-06-21 ---------------

const int nax = 200005;
struct Query_Q
{
	int l;
	int r;
	int idx;
};

Query_Q Query[nax];
int ans[nax];
int freq[1000005];
int cnt =0;
int BLK = 300;
int n;
std::vector<int> v(30003);
bool comp(Query_Q a , Query_Q b){
	if((a.l / BLK) != (b.l / BLK)){
		return (a.l/BLK) < (b.l / BLK);
	}

	return a.r < b.r;
}

void add(int x){
	assert(x >= 0 && x < n);
	freq[v[x]]++;
	if(freq[v[x]] == 1)cnt++;
}

void remove(int x){
	//error(x);
	assert(x >= 0 && x < n);
	freq[v[x]]--;
	assert(freq[v[x]] >= 0);
	if(freq[v[x]] == 0) cnt--;
	assert(cnt >= 0);
}
void test_case(){

	cin>>n;

	for (int i = 0; i < n; ++i)
	{
		cin>>v[i];
	}

	int q;cin>>q;
	for (int i = 0; i < q; ++i)
	{
		cin>>(Query[i].l)>>(Query[i].r);
		Query[i].idx = i;

		Query[i].l--;
		Query[i].r--; // for making 0 - based index
	}

	sort(Query , Query + q , comp);

	int ML = 0 , MR = -1 ;

	for (int i = 0; i < q; ++i)
	{
		int L = Query[i].l;
		int R = Query[i].r;

		int id = Query[i].idx;

		////extand///
		while (L < ML)
		{
			ML--;
			add(ML);
		}
		while (R > MR)
		{
			MR++;
			add(MR);
		}

		////compress
		while (ML < L)
		{
			remove(ML);
			ML++;
		}
		while (MR > R)
		{
			remove(MR);
			MR--;
		}

		ans[id] = cnt;
	}

	for (int i = 0; i < q; ++i)
	{
		cout<<ans[i]<<"\n";
	}
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	cout.tie(NULL);
	//init();
	int t=1;//;cin>>t;
	while (t--)
	{
		test_case();
	}
	return 0;
}
