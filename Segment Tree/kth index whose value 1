



typedef int item;


struct segtree
{
	ll  sz ;
	std::vector<item> arr;


	item NEUTRAL_ELEMENT = 0;
	void init(int n){
		sz = 1;
		while (sz < n)
		{
			sz *= 2;
		}

		arr.assign(2*sz  , NEUTRAL_ELEMENT);
	}
	item single(int val){
		return val;
		//because we want max seg max suf max pref
	}

	item merge(item a , item b){

		return a+b;

	}

	void build_recc(std::vector<ll>& v , int x , int lx , int rx ){
		if(rx - lx == 1){
			if(lx < (int)v.size()){
				arr[x]  = single(v[lx]);
			}
			return ;
		}

		int m = (lx  + rx)/2;

		build_recc(v , 2*x+1 , lx , m);
		build_recc(v , 2*x+2 , m , rx);

		arr[x] = merge(arr[2*x + 1] , arr[2*x + 2]);
	}
	void build(std::vector<ll>& v){
		build_recc(v , 0 , 0 , sz);
	}
	void set_recc(int i , int val , int x,int lx,int rx){
		if(rx - lx == 1){
			arr[x] = single(val);
			return ;
		}

		int m = (lx+rx)/2;

		if(i < m)set_recc( i , val, 2*x+1, lx , m);
		else set_recc( i , val, 2*x+2, m , rx);

		arr[x] = merge(arr[2*x+1], arr[2*x+2]);
	}
	void setValue(int i , int val){
		set_recc(i , val , 0 , 0 ,sz);
	}
	item max_seg_recc(int l , int r , int x , int lx , int rx){
		if(rx <= l || r <= lx){
			return NEUTRAL_ELEMENT;
		}

		if(rx <= r && lx >= l){
			return arr[x];
		}
		int m = (lx+rx)/2;
		item s1 = max_seg_recc(l , r , 2*x+1 , lx , m);
		item s2 = max_seg_recc(l , r , 2*x+2 , m , rx);

		return merge(s1 , s2);
	}

	item max_seg(int l , int r){
		return max_seg_recc(l , r , 0 ,0,sz);
	}

	item find(int i , int x,int lx,int rx){
		if(rx-lx == 1){
			return lx;
		}

		int m = (lx+rx)/2;


		if(i < arr[2*x+1]){
			find(i , 2*x+1 , lx , m);
		}
		else{
			find(i-arr[2*x+1] , 2*x+2 , m , rx);
		}
	}


	item find(int i){
		return find(i , 0 , 0 ,sz);
	}
};

void test_case(){
	int n,q;cin>>n>>q;
	std::vector<ll> v(n);

	for (int i = 0; i < n; ++i)
	{
		cin>>v[i];
	}

	segtree st;
	st.init(n);

	st.build(v);

	while (q--)
	{
		int op;cin>>op;
		if(op == 1){
			int idx;cin>>idx;
			v[idx] = 1 - v[idx];
			st.setValue(idx , v[idx]);
		}
		else{
			int k;cin>>k;

			cout<<st.find(k)<<"\n";
		}
	}

}
